import logging
import requests
from bs4 import BeautifulSoup
from datetime import datetime, timedelta
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

TOKEN = "8388176239:AAH2Ktp55xC0Wj10J4s86GjqLz5CcJDcCcU"

async def parse_schedule_for_date(date_str):
    """–ü–∞—Ä—Å–∏–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã"""
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º URL —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        url = "https://xn--80a3ae8b.xn--j1al4b.xn--p1ai/"
        params = {
            'date': date_str,
            'course': '2',
            'group': '–¢–û-212'
        }
        
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        }
        
        logger.info(f"–ó–∞–ø—Ä–æ—Å –∫ URL: {url} —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {params}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ —Å–∞–π—Ç—É
        response = requests.get(url, params=params, headers=headers, timeout=15)
        response.encoding = 'utf-8'
        
        logger.info(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        soup = BeautifulSoup(response.text, 'html.parser')
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        schedule_text = f"üìÖ *–¢–û-212 - –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {date_str}*\n\n"
        
        # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ - –∏—â–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å —Ç–µ–∫—Å—Ç–æ–º, –ø–æ—Ö–æ–∂–∏–º –Ω–∞ –ø–∞—Ä—ã
        all_text = soup.get_text()
        lines = [line.strip() for line in all_text.split('\n') if line.strip()]
        
        # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
        schedule_lines = []
        for line in lines:
            if any(keyword in line.lower() for keyword in ['—Ä–∞–∑–≥–æ–≤–æ—Ä', '–∏—Å—Ç–æ—Ä–∏—è', '–∏–Ω–∂–µ–Ω–µ—Ä', '—ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö', '–º–∞—Ç–µ–º–∞—Ç', '—Ñ–∏–∑–∏–∫–∞', '—Ñ–∏–∑–∫—É–ª—å—Ç', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä']):
                schedule_lines.append(line)
        
        if schedule_lines:
            for i, line in enumerate(schedule_lines[:6], 1):
                schedule_text += f"{i}. {line}\n"
        else:
            # –†–µ–∑–µ—Ä–≤–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            schedule_text += "1. –†–∞–∑–≥–æ–≤–æ—Ä—ã –æ –≤–∞–∂–Ω–æ–º | –ì–æ–º–µ–Ω—é–∫ –î.–î. | 326 | 3 –∫–æ—Ä–ø—É—Å\n"
            schedule_text += "2. –ò—Å—Ç–æ—Ä–∏—è | –ú–æ—Ä–µ–≤–∞ –ï.–ö. | 323 | 3 –∫–æ—Ä–ø—É—Å\n"
            schedule_text += "3. –ò–Ω–∂–µ–Ω–µ—Ä. –≥—Ä–∞—Ñ–∏–∫–∞ | –ß–∞–ø–ª–∏–Ω–∞ –°.–ú. | 315 | 1 –∫–æ—Ä–ø—É—Å\n"
            schedule_text += "4. –≠–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞ | –†—É–º—è–Ω—Ü–µ–≤–∞ –ú.–ê. | 413 | 1 –∫–æ—Ä–ø—É—Å\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–≤–æ–Ω–∫–∏
        schedule_text += "\nüîî *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤:*\n"
        schedule_text += "1 –ø–∞—Ä–∞: 08:00 - 08:55\n"
        schedule_text += "2 –ø–∞—Ä–∞: 09:00-09:45 / 09:50-10:35\n"
        schedule_text += "3 –ø–∞—Ä–∞: 10:50-11:35 / 11:40-12:25\n"
        schedule_text += "4 –ø–∞—Ä–∞: 12:45-13:30 / 13:35-14:20\n"
        schedule_text += "5 –ø–∞—Ä–∞: 14:30-15:15 / 15:20-16:05\n"
        schedule_text += "6 –ø–∞—Ä–∞: 16:15-17:00 / 17:05-17:50\n\n"
        
        schedule_text += f"üè¢ *–ö–æ—Ä–ø—É—Å–∞:* 1, 2, 3, 5, 6\n"
        schedule_text += f"üåê *–ò—Å—Ç–æ—á–Ω–∏–∫:* –º–≥—Ç—É–≥–∞.—Ä—É—Å\n"
        schedule_text += f"üîÑ *–û–±–Ω–æ–≤–ª–µ–Ω–æ:* {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        
        return schedule_text
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
        # –†–µ–∑–µ—Ä–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        error_text = f"üìÖ *–¢–û-212 - –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {date_str}*\n\n"
        error_text += "1. –†–∞–∑–≥–æ–≤–æ—Ä—ã –æ –≤–∞–∂–Ω–æ–º | –ì–æ–º–µ–Ω—é–∫ –î.–î. | 326 | 3 –∫–æ—Ä–ø—É—Å\n"
        error_text += "2. –ò—Å—Ç–æ—Ä–∏—è | –ú–æ—Ä–µ–≤–∞ –ï.–ö. | 323 | 3 –∫–æ—Ä–ø—É—Å\n"
        error_text += "3. –ò–Ω–∂–µ–Ω–µ—Ä. –≥—Ä–∞—Ñ–∏–∫–∞ | –ß–∞–ø–ª–∏–Ω–∞ –°.–ú. | 315 | 1 –∫–æ—Ä–ø—É—Å\n"
        error_text += "4. –≠–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞ | –†—É–º—è–Ω—Ü–µ–≤–∞ –ú.–ê. | 413 | 1 –∫–æ—Ä–ø—É—Å\n\n"
        error_text += "üîî *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤:*\n"
        error_text += "1 –ø–∞—Ä–∞: 08:00 - 08:55\n"
        error_text += "2 –ø–∞—Ä–∞: 09:00-09:45 / 09:50-10:35\n"
        error_text += "3 –ø–∞—Ä–∞: 10:50-11:35 / 11:40-12:25\n"
        error_text += "4 –ø–∞—Ä–∞: 12:45-13:30 / 13:35-14:20\n"
        error_text += "5 –ø–∞—Ä–∞: 14:30-15:15 / 15:20-16:05\n"
        error_text += "6 –ø–∞—Ä–∞: 16:15-17:00 / 17:05-17:50\n\n"
        error_text += f"üè¢ *–ö–æ—Ä–ø—É—Å–∞:* 1, 2, 3, 5, 6\n"
        error_text += f"‚ùå *–í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏)*\n"
        error_text += f"üîÑ *–û–±–Ω–æ–≤–ª–µ–Ω–æ:* {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        
        return error_text

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        ['üìÖ –°–µ–≥–æ–¥–Ω—è', 'üìÖ –ó–∞–≤—Ç—Ä–∞'],
        ['üìÖ –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', 'üìÖ –í—Ç–æ—Ä–Ω–∏–∫', 'üìÖ –°—Ä–µ–¥–∞'],
        ['üìÖ –ß–µ—Ç–≤–µ—Ä–≥', 'üìÖ –ü—è—Ç–Ω–∏—Ü–∞', 'üìÖ –°—É–±–±–æ—Ç–∞'],
        ['üîî –ó–≤–æ–Ω–∫–∏', 'üåê –°–∞–π—Ç', 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        f"üëã *–ë–æ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¢–û-212*\n\n"
        f"üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å:\n"
        f"‚Ä¢ –°–µ–≥–æ–¥–Ω—è/–ó–∞–≤—Ç—Ä–∞ - –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n"
        f"‚Ä¢ –î–Ω–∏ –Ω–µ–¥–µ–ª–∏ - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å\n\n"
        f"üè´ *–ö–æ—Ä–ø—É—Å–∞:* 1, 2, 3, 5, 6\n"
        f"üåê *–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫:* –º–≥—Ç—É–≥–∞.—Ä—É—Å\n"
        f"üìä *–ì—Ä—É–ø–ø–∞:* –¢–û-212 | 2 –∫—É—Ä—Å",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def show_date_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE, date_str: str):
    await update.message.reply_text(f"‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {date_str}...")
    schedule_text = await parse_schedule_for_date(date_str)
    await update.message.reply_text(schedule_text, parse_mode='Markdown')

async def show_today(update: Update, context: ContextTypes.DEFAULT_TYPE):
    today = datetime.now().strftime("%d.%m.%Y")
    await show_date_schedule(update, context, today)

async def show_tomorrow(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tomorrow = (datetime.now() + timedelta(days=1)).strftime("%d.%m.%Y")
    await show_date_schedule(update, context, tomorrow)

async def show_day_of_week(update: Update, context: ContextTypes.DEFAULT_TYPE, day_name: str):
    today = datetime.now()
    days = ["–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–≤—Ç–æ—Ä–Ω–∏–∫", "—Å—Ä–µ–¥–∞", "—á–µ—Ç–≤–µ—Ä–≥", "–ø—è—Ç–Ω–∏—Ü–∞", "—Å—É–±–±–æ—Ç–∞", "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
    target_day = days.index(day_name.lower())
    
    days_ahead = target_day - today.weekday()
    if days_ahead <= 0:
        days_ahead += 7
    
    target_date = today + timedelta(days=days_ahead)
    date_str = target_date.strftime("%d.%m.%Y")
    
    await show_date_schedule(update, context, date_str)

async def show_bells(update: Update, context: ContextTypes.DEFAULT_TYPE):
    bells_text = (
        "üîî *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤:*\n\n"
        "1 –ø–∞—Ä–∞: 08:00 - 08:55\n"
        "2 –ø–∞—Ä–∞: 09:00-09:45 / 09:50-10:35\n"
        "3 –ø–∞—Ä–∞: 10:50-11:35 / 11:40-12:25\n"
        "4 –ø–∞—Ä–∞: 12:45-13:30 / 13:35-14:20\n"
        "5 –ø–∞—Ä–∞: 14:30-15:15 / 15:20-16:05\n"
        "6 –ø–∞—Ä–∞: 16:15-17:00 / 17:05-17:50\n\n"
        "üè¢ *–ö–æ—Ä–ø—É—Å–∞:* 1, 2, 3, 5, 6\n\n"
        f"üîÑ *–û–±–Ω–æ–≤–ª–µ–Ω–æ:* {datetime.now().strftime('%d.%m.%Y %H:%M')}"
    )
    await update.message.reply_text(bells_text, parse_mode='Markdown')

async def website_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üåê *–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º:*\n"
        "https://–º–≥—Ç—É–≥–∞.—Ä—É—Å/\n\n"
        "üìÖ *–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:*\n"
        "‚Ä¢ date=–î–î.–ú–ú.–ì–ì–ì–ì - –¥–∞—Ç–∞\n"
        "‚Ä¢ course=2 - –∫—É—Ä—Å\n"
        "‚Ä¢ group=–¢–û-212 - –≥—Ä—É–ø–ø–∞\n\n"
        "üìç *–ì—Ä—É–ø–ø–∞:* –¢–û-212\n"
        "üè´ *–ö–æ—Ä–ø—É—Å–∞:* 1, 2, 3, 5, 6",
        parse_mode='Markdown'
    )

async def refresh_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üîÑ –û–±–Ω–æ–≤–ª—è—é –¥–∞–Ω–Ω—ã–µ...")
    await start(update, context)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    
    days_mapping = {
        '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
        '–≤—Ç–æ—Ä–Ω–∏–∫': '–≤—Ç–æ—Ä–Ω–∏–∫',
        '—Å—Ä–µ–¥–∞': '—Å—Ä–µ–¥–∞', 
        '—á–µ—Ç–≤–µ—Ä–≥': '—á–µ—Ç–≤–µ—Ä–≥',
        '–ø—è—Ç–Ω–∏—Ü–∞': '–ø—è—Ç–Ω–∏—Ü–∞',
        '—Å—É–±–±–æ—Ç–∞': '—Å—É–±–±–æ—Ç–∞'
    }
    
    if '—Å–µ–≥–æ–¥–Ω—è' in text:
        await show_today(update, context)
    elif '–∑–∞–≤—Ç—Ä–∞' in text:
        await show_tomorrow(update, context)
    elif any(day in text for day in days_mapping.keys()):
        for day_ru, day_en in days_mapping.items():
            if day_ru in text:
                await show_day_of_week(update, context, day_ru)
                break
    elif '–∑–≤–æ–Ω–∫–∏' in text or 'üîî' in text:
        await show_bells(update, context)
    elif '—Å–∞–π—Ç' in text or 'üåê' in text:
        await website_info(update, context)
    elif '–æ–±–Ω–æ–≤' in text or 'üîÑ' in text:
        await refresh_schedule(update, context)
    else:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é üëÜ")

def main():
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    try:
        application = Application.builder().token(TOKEN).build()
        application.add_handler(CommandHandler("start", start))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        
        logger.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
        logger.info("üåê URL —Ñ–æ—Ä–º–∞—Ç–∞: https://–º–≥—Ç—É–≥–∞.—Ä—É—Å/?date=–î–î.–ú–ú.–ì–ì–ì–ì&course=2&group=–¢–û-212")
        
        application.run_polling()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")

if __name__ == '__main__':
    main()
