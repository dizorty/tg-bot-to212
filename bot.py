import logging
import requests
from bs4 import BeautifulSoup
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters
import re
import os

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –õ—É—á—à–µ —Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è:
# TOKEN = os.environ.get("BOT_TOKEN")
TOKEN = "8388176239:AAH2Ktp55xC0Wj10J4s86GjqLz5CcJDcCcU"

DAYS = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫','–í—Ç–æ—Ä–Ω–∏–∫','–°—Ä–µ–¥–∞','–ß–µ—Ç–≤–µ—Ä–≥','–ü—è—Ç–Ω–∏—Ü–∞','–°—É–±–±–æ—Ç–∞','–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']

async def parse_schedule(day: str = None):
    """–ü–∞—Ä—Å–∏–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å —Å–∞–π—Ç–∞. –ï—Å–ª–∏ day –∑–∞–¥–∞–Ω ‚Äî –ø—ã—Ç–∞–µ–º—Å—è –≤–µ—Ä–Ω—É—Ç—å —Ç–æ–ª—å–∫–æ —ç—Ç–æ—Ç –¥–µ–Ω—å."""
    try:
        # –ß–∏—Ç–∞–±–µ–ª—å–Ω—ã–π (unicode) –¥–æ–º–µ–Ω ‚Äî requests –æ–±—ã—á–Ω–æ –µ–≥–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç
        url = "https://–º–≥—Ç—É–≥–∞.—Ä—É—Å/student/raspisanie-zanyatiy/"
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
        }

        response = requests.get(url, headers=headers, timeout=10)
        # –∏–Ω–æ–≥–¥–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º apparent_encoding
        response.encoding = response.apparent_encoding or 'utf-8'
        soup = BeautifulSoup(response.text, 'html.parser')

        # –°–æ–±–∏—Ä–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ —É–¥–æ–±–Ω–æ–º –≤–∏–¥–µ
        page_text = soup.get_text(separator="\n")
        # –û—á–∏—â–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        lines = [ln.strip() for ln in page_text.splitlines() if ln.strip()]
        page_text = "\n".join(lines)

        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –±–ª–æ–∫–∏ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º –¥–Ω–µ–π (–µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ)
        pattern = r'(?P<day>' + '|'.join(DAYS) + r')(?P<block>.*?)(?=(?:' + '|'.join(DAYS) + r')|$)'
        matches = re.finditer(pattern, page_text, flags=re.DOTALL | re.IGNORECASE)
        day_blocks = {}
        for m in matches:
            key = m.group('day').strip().lower().capitalize()
            block = m.group('block').strip()
            # –ù–µ–±–æ–ª—å—à–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è: –æ—Ç—Ä–µ–∑–∞–µ–º –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–µ –±–ª–æ–∫–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ ‚Äî –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å
            day_blocks[key] = block

        header = "üìÖ *–¢–û-212 - –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ*\n\n"
        footer = f"üè¢ *–ö–æ—Ä–ø—É—Å–∞:* 1, 2, 3, 5, 6\nüåê *–ò—Å—Ç–æ—á–Ω–∏–∫:* –º–≥—Ç—É–≥–∞.—Ä—É—Å\nüîÑ *–û–±–Ω–æ–≤–ª–µ–Ω–æ:* {datetime.now().strftime('%d.%m.%Y %H:%M')}"

        if day:
            day_cap = day.capitalize()
            if day_blocks.get(day_cap):
                schedule_text = header + f"*{day_cap}*\n{day_blocks[day_cap]}\n\n" + footer
                return schedule_text
            else:
                # –ï—Å–ª–∏ –Ω–∞ —Å–∞–π—Ç–µ –Ω–µ—Ç —Ä–∞–∑–±–∏–≤–∫–∏ –ø–æ –¥–Ω—è–º ‚Äî –≤–µ—Ä–Ω–µ–º –æ–±—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ (—Ñ–æ–ª–ª–±–µ–∫)
                logger.info(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è {day_cap} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞—é –æ–±—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.")
                # fallback ‚Äî –≤–∞—à —Å—Ç–∞—Ç–∏—á–Ω—ã–π —à–∞–±–ª–æ–Ω (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π)
                schedule_text = header
                schedule_text += "1. –†–∞–∑–≥–æ–≤–æ—Ä—ã –æ –≤–∞–∂–Ω–æ–º | –ì–æ–º–µ–Ω—é–∫ –î.–î. | 326 | 3 –∫–æ—Ä–ø—É—Å\n"
                schedule_text += "2. –ò—Å—Ç–æ—Ä–∏—è | –ú–æ—Ä–µ–≤–∞ –ï.–ö. | 323 | 3 –∫–æ—Ä–ø—É—Å\n"
                schedule_text += "3. –ò–Ω–∂–µ–Ω–µ—Ä. –≥—Ä–∞—Ñ–∏–∫–∞ | –ß–∞–ø–ª–∏–Ω–∞ –°.–ú. | 315 | 1 –∫–æ—Ä–ø—É—Å\n"
                schedule_text += "4. –≠–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞ | –†—É–º—è–Ω—Ü–µ–≤–∞ –ú.–ê. | 413 | 1 –∫–æ—Ä–ø—É—Å\n\n"
                schedule_text += "üîî *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤:*\n"
                schedule_text += "1 –ø–∞—Ä–∞: 08:00 - 08:55\n"
                schedule_text += "2 –ø–∞—Ä–∞: 09:00-09:45 / 09:50-10:35\n"
                schedule_text += "3 –ø–∞—Ä–∞: 10:50-11:35 / 11:40-12:25\n"
                schedule_text += "4 –ø–∞—Ä–∞: 12:45-13:30 / 13:35-14:20\n"
                schedule_text += "5 –ø–∞—Ä–∞: 14:30-15:15 / 15:20-16:05\n"
                schedule_text += "6 –ø–∞—Ä–∞: 16:15-17:00 / 17:05-17:50\n\n"
                schedule_text += footer
                return schedule_text

        # –ï—Å–ª–∏ day –Ω–µ —É–∫–∞–∑–∞–Ω ‚Äî –ø—ã—Ç–∞–µ–º—Å—è –≤–µ—Ä–Ω—É—Ç—å –≤—Å—ë, —á—Ç–æ –Ω–∞—à–ª–∏ –ø–æ –¥–Ω—è–º.
        schedule_text = header
        if day_blocks:
            for d in DAYS:
                if d in day_blocks:
                    schedule_text += f"*{d}*\n{day_blocks[d]}\n\n"
        else:
            # –§–æ–ª–ª–±–µ–∫ ‚Äî —Ç–æ—Ç –∂–µ —Å—Ç–∞—Ç–∏—á–Ω—ã–π —à–∞–±–ª–æ–Ω
            schedule_text += "1. –†–∞–∑–≥–æ–≤–æ—Ä—ã –æ –≤–∞–∂–Ω–æ–º | –ì–æ–º–µ–Ω—é–∫ –î.–î. | 326 | 3 –∫–æ—Ä–ø—É—Å\n"
            schedule_text += "2. –ò—Å—Ç–æ—Ä–∏—è | –ú–æ—Ä–µ–≤–∞ –ï.–ö. | 323 | 3 –∫–æ—Ä–ø—É—Å\n"
            schedule_text += "3. –ò–Ω–∂–µ–Ω–µ—Ä. –≥—Ä–∞—Ñ–∏–∫–∞ | –ß–∞–ø–ª–∏–Ω–∞ –°.–ú. | 315 | 1 –∫–æ—Ä–ø—É—Å\n"
            schedule_text += "4. –≠–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞ | –†—É–º—è–Ω—Ü–µ–≤–∞ –ú.–ê. | 413 | 1 –∫–æ—Ä–ø—É—Å\n\n"
            schedule_text += "üîî *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤:*\n"
            schedule_text += "1 –ø–∞—Ä–∞: 08:00 - 08:55\n"
            schedule_text += "2 –ø–∞—Ä–∞: 09:00-09:45 / 09:50-10:35\n"
            schedule_text += "3 –ø–∞—Ä–∞: 10:50-11:35 / 11:40-12:25\n"
            schedule_text += "4 –ø–∞—Ä–∞: 12:45-13:30 / 13:35-14:20\n"
            schedule_text += "5 –ø–∞—Ä–∞: 14:30-15:15 / 15:20-16:05\n"
            schedule_text += "6 –ø–∞—Ä–∞: 16:15-17:00 / 17:05-17:50\n\n"

        schedule_text += footer
        return schedule_text

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

async def parse_bells_only():
    """–ü–∞—Ä—Å–∏–º —Ç–æ–ª—å–∫–æ –∑–≤–æ–Ω–∫–∏ (—Å—Ç–∞—Ç–∏—á–Ω–æ, –º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –∏–∑ —Å–∞–π—Ç–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)."""
    try:
        bells_text = "üîî *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤:*\n\n"
        bells_text += "1 –ø–∞—Ä–∞: 08:00 - 08:55\n"
        bells_text += "2 –ø–∞—Ä–∞: 09:00-09:45 / 09:50-10:35\n"
        bells_text += "3 –ø–∞—Ä–∞: 10:50-11:35 / 11:40-12:25\n"
        bells_text += "4 –ø–∞—Ä–∞: 12:45-13:30 / 13:35-14:20\n"
        bells_text += "5 –ø–∞—Ä–∞: 14:30-15:15 / 15:20-16:05\n"
        bells_text += "6 –ø–∞—Ä–∞: 16:15-17:00 / 17:05-17:50\n\n"
        bells_text += "üè¢ *–ö–æ—Ä–ø—É—Å–∞:* 1, 2, 3, 5, 6\n"
        bells_text += f"üåê *–ò—Å—Ç–æ—á–Ω–∏–∫:* –º–≥—Ç—É–≥–∞.—Ä—É—Å\n"
        bells_text += f"üîÑ *–û–±–Ω–æ–≤–ª–µ–Ω–æ:* {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        return bells_text
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–≤–æ–Ω–∫–æ–≤: {e}")
        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        ['üìÖ –ü–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', 'üîî –¢–æ–ª—å–∫–æ –∑–≤–æ–Ω–∫–∏'],
        ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞'],
        ['–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞'],
        ['–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'üåê –°–∞–π—Ç'],
        ['‚ùì –ü–æ–º–æ—â—å']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¢–û-212\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É:",
        reply_markup=reply_markup
    )

async def show_full_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –ø–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ...")
    schedule_text = await parse_schedule()
    await update.message.reply_text(schedule_text, parse_mode='Markdown')

async def show_bells_only(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤...")
    bells_text = await parse_bells_only()
    await update.message.reply_text(bells_text, parse_mode='Markdown')

async def update_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üîÑ –û–±–Ω–æ–≤–ª—è—é –¥–∞–Ω–Ω—ã–µ —Å —Å–∞–π—Ç–∞...")
    await show_full_schedule(update, context)

async def website_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üåê *–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç:*\n"
        "https://–º–≥—Ç—É–≥–∞.—Ä—É—Å/student/raspisanie-zanyatiy/\n\n"
        "–¢–∞–º –≤—Å–µ–≥–¥–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –∑–≤–æ–Ω–∫–∏!",
        parse_mode='Markdown'
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìã *–ö–æ–º–∞–Ω–¥—ã:*\n"
        "‚Ä¢ –ü–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ - –ø–∞—Ä—ã + –∑–≤–æ–Ω–∫–∏\n"
        "‚Ä¢ –¢–æ–ª—å–∫–æ –∑–≤–æ–Ω–∫–∏ - —Ç–æ–ª—å–∫–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤\n"
        "‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ - –ø–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–Ω—è\n"
        "‚Ä¢ –û–±–Ω–æ–≤–∏—Ç—å - –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å —Å–∞–π—Ç–∞\n"
        "‚Ä¢ –°–∞–π—Ç - —Å—Å—ã–ª–∫–∞ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫\n"
        "‚Ä¢ –ü–æ–º–æ—â—å - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞",
        parse_mode='Markdown'
    )

def normalize_day_input(text: str):
    t = text.strip().lower()
    map_short = {
        '–ø–Ω':'–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫','–≤—Ç':'–í—Ç–æ—Ä–Ω–∏–∫','—Å—Ä':'–°—Ä–µ–¥–∞','—á—Ç':'–ß–µ—Ç–≤–µ—Ä–≥','–ø—Ç':'–ü—è—Ç–Ω–∏—Ü–∞','—Å–±':'–°—É–±–±–æ—Ç–∞','–≤—Å':'–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
    }
    if t in map_short:
        return map_short[t]
    # –ø–æ–ª–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
    for d in DAYS:
        if t == d.lower():
            return d
    return None

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower().strip()

    # –ü—Ä–æ–≤–µ—Ä–∏–º –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –≤ —è–≤–Ω–æ–º –≤–∏–¥–µ
    day = normalize_day_input(text)
    if day:
        await update.message.reply_text(f"‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day}...")
        schedule_text = await parse_schedule(day=day)
        await update.message.reply_text(schedule_text, parse_mode='Markdown')
        return

    if '–ø–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ' in text or 'üìÖ' in text:
        await show_full_schedule(update, context)
    elif '—Ç–æ–ª—å–∫–æ –∑–≤–æ–Ω–∫–∏' in text or 'üîî' in text:
        await show_bells_only(update, context)
    elif '–æ–±–Ω–æ–≤–∏—Ç—å' in text or 'üîÑ' in text:
        await update_command(update, context)
    elif '—Å–∞–π—Ç' in text or 'üåê' in text:
        await website_info(update, context)
    elif '–ø–æ–º–æ—â—å' in text or '‚ùì' in text:
        await help_command(update, context)
    else:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é üëÜ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω—É–∂–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏.")

def main():
    application = Application.builder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling()

if __name__ == '__main__':
    main()
