import logging
from datetime import datetime, timedelta
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

TOKEN = "8388176239:AAH2Ktp55xC0Wj10J4s86GjqLz5CcJDcCcU"

async def get_schedule_for_date(date_str):
    """–ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –¥–∞—Ç—ã"""
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - –ø–æ–∑–∂–µ –¥–æ–±–∞–≤–∏–º –ø–∞—Ä—Å–∏–Ω–≥
    schedule_text = f"üìÖ *–¢–û-212 - –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {date_str}*\n\n"
    
    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
    weekday = datetime.strptime(date_str, "%d.%m.%Y").weekday()
    
    if weekday == 0:  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
        schedule_text += "1. –†–∞–∑–≥–æ–≤–æ—Ä—ã –æ –≤–∞–∂–Ω–æ–º | –ì–æ–º–µ–Ω—é–∫ –î.–î. | 326 | 3 –∫–æ—Ä–ø—É—Å\n"
        schedule_text += "2. –ò—Å—Ç–æ—Ä–∏—è | –ú–æ—Ä–µ–≤–∞ –ï.–ö. | 323 | 3 –∫–æ—Ä–ø—É—Å\n"
        schedule_text += "3. –ò–Ω–∂–µ–Ω–µ—Ä. –≥—Ä–∞—Ñ–∏–∫–∞ | –ß–∞–ø–ª–∏–Ω–∞ –°.–ú. | 315 | 1 –∫–æ—Ä–ø—É—Å\n"
        schedule_text += "4. –≠–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞ | –†—É–º—è–Ω—Ü–µ–≤–∞ –ú.–ê. | 413 | 1 –∫–æ—Äp—É—Å\n"
    elif weekday == 1:  # –í—Ç–æ—Ä–Ω–∏–∫
        schedule_text += "1. –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ | 210 | 1 –∫–æ—Ä–ø—É—Å\n"
        schedule_text += "2. –§–∏–∑–∏–∫–∞ | 315 | 1 –∫–æ—Ä–ø—É—Å\n"
        schedule_text += "3. –§–∏–∑–∫—É–ª—å—Ç—É—Ä–∞ | —Å–ø–æ—Ä—Ç–∑–∞–ª | 2 –∫–æ—Ä–ø—É—Å\n"
    elif weekday == 2:  # –°—Ä–µ–¥–∞
        schedule_text += "1. –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ | 401 | 1 –∫–æ—Ä–ø—É—Å\n"
        schedule_text += "2. –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö | 402 | 1 –∫–æ—Ä–ø—É—Å\n"
    elif weekday == 3:  # –ß–µ—Ç–≤–µ—Ä–≥
        schedule_text += "1. –ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ | 205 | 2 –∫–æ—Ä–ø—É—Å\n"
        schedule_text += "2. –≠–∫–æ–Ω–æ–º–∏–∫–∞ | 310 | 3 –∫–æ—Ä–ø—É—Å\n"
    elif weekday == 4:  # –ü—è—Ç–Ω–∏—Ü–∞
        schedule_text += "1. –ë–ñ–î | 115 | 1 –∫–æ—Ä–ø—É—Å\n"
        schedule_text += "2. –≠–∫–æ–ª–æ–≥–∏—è | 116 | 1 –∫–æ—Ä–ø—É—Å\n"
    else:  # –°—É–±–±–æ—Ç–∞/–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
        schedule_text += "üéâ –í—ã—Ö–æ–¥–Ω–æ–π! –ü–∞—Ä –Ω–µ—Ç\n"
    
    schedule_text += "\nüîî *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤:*\n"
    schedule_text += "1 –ø–∞—Ä–∞: 08:00 - 08:55\n"
    schedule_text += "2 –ø–∞—Ä–∞: 09:00-09:45 / 09:50-10:35\n"
    schedule_text += "3 –ø–∞—Ä–∞: 10:50-11:35 / 11:40-12:25\n"
    schedule_text += "4 –ø–∞—Ä–∞: 12:45-13:30 / 13:35-14:20\n"
    schedule_text += "5 –ø–∞—Ä–∞: 14:30-15:15 / 15:20-16:05\n"
    schedule_text += "6 –ø–∞—Ä–∞: 16:15-17:00 / 17:05-17:50\n\n"
    
    schedule_text += f"üè¢ *–ö–æ—Ä–ø—É—Å–∞:* 1, 2, 3, 5, 6\n"
    schedule_text += f"üîÑ *–û–±–Ω–æ–≤–ª–µ–Ω–æ:* {datetime.now().strftime('%d.%m.%Y %H:%M')}"
    
    return schedule_text

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        ['üìÖ –°–µ–≥–æ–¥–Ω—è', 'üìÖ –ó–∞–≤—Ç—Ä–∞'],
        ['üìÖ –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', 'üìÖ –í—Ç–æ—Ä–Ω–∏–∫', 'üìÖ –°—Ä–µ–¥–∞'],
        ['üìÖ –ß–µ—Ç–≤–µ—Ä–≥', 'üìÖ –ü—è—Ç–Ω–∏—Ü–∞', 'üìÖ –°—É–±–±–æ—Ç–∞'],
        ['üîî –ó–≤–æ–Ω–∫–∏', 'üåê –°–∞–π—Ç']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        f"üëã *–ë–æ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¢–û-212*\n\n"
        f"üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å:\n"
        f"‚Ä¢ –°–µ–≥–æ–¥–Ω—è/–ó–∞–≤—Ç—Ä–∞ - –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n"
        f"‚Ä¢ –î–Ω–∏ –Ω–µ–¥–µ–ª–∏ - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ –¥–Ω—è–º\n\n"
        f"üè´ *–ö–æ—Ä–ø—É—Å–∞:* 1, 2, 3, 5, 6\n"
        f"üåê *–ò—Å—Ç–æ—á–Ω–∏–∫:* –º–≥—Ç—É–≥–∞.—Ä—É—Å",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def show_date_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE, date_str: str):
    await update.message.reply_text(f"‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {date_str}...")
    schedule_text = await get_schedule_for_date(date_str)
    await update.message.reply_text(schedule_text, parse_mode='Markdown')

async def show_today(update: Update, context: ContextTypes.DEFAULT_TYPE):
    today = datetime.now().strftime("%d.%m.%Y")
    await show_date_schedule(update, context, today)

async def show_tomorrow(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tomorrow = (datetime.now() + timedelta(days=1)).strftime("%d.%m.%Y")
    await show_date_schedule(update, context, tomorrow)

async def show_day_of_week(update: Update, context: ContextTypes.DEFAULT_TYPE, day_name: str):
    today = datetime.now()
    days = ["–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–≤—Ç–æ—Ä–Ω–∏–∫", "—Å—Ä–µ–¥–∞", "—á–µ—Ç–≤–µ—Ä–≥", "–ø—è—Ç–Ω–∏—Ü–∞", "—Å—É–±–±–æ—Ç–∞", "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
    target_day = days.index(day_name.lower())
    
    days_ahead = target_day - today.weekday()
    if days_ahead <= 0:
        days_ahead += 7
    
    target_date = today + timedelta(days=days_ahead)
    date_str = target_date.strftime("%d.%m.%Y")
    
    await show_date_schedule(update, context, date_str)

async def show_bells(update: Update, context: ContextTypes.DEFAULT_TYPE):
    bells_text = (
        "üîî *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤:*\n\n"
        "1 –ø–∞—Ä–∞: 08:00 - 08:55\n"
        "2 –ø–∞—Ä–∞: 09:00-09:45 / 09:50-10:35\n"
        "3 –ø–∞—Ä–∞: 10:50-11:35 / 11:40-12:25\n"
        "4 –ø–∞—Ä–∞: 12:45-13:30 / 13:35-14:20\n"
        "5 –ø–∞—Ä–∞: 14:30-15:15 / 15:20-16:05\n"
        "6 –ø–∞—Ä–∞: 16:15-17:00 / 17:05-17:50\n\n"
        "üè¢ *–ö–æ—Ä–ø—É—Å–∞:* 1, 2, 3, 5, 6\n\n"
        f"üîÑ *–û–±–Ω–æ–≤–ª–µ–Ω–æ:* {datetime.now().strftime('%d.%m.%Y %H:%M')}"
    )
    await update.message.reply_text(bells_text, parse_mode='Markdown')

async def website_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üåê *–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç:*\n"
        "https://–º–≥—Ç—É–≥–∞.—Ä—É—Å/student/raspisanie-zanyatiy/\n\n"
        "üìÖ *–ï—Å—Ç—å –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –¥–Ω–µ–π*\n"
        "üìç *–ì—Ä—É–ø–ø–∞:* –¢–û-212\n"
        "üè´ *–ö–æ—Ä–ø—É—Å–∞:* 1, 2, 3, 5, 6",
        parse_mode='Markdown'
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    
    days_mapping = {
        '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
        '–≤—Ç–æ—Ä–Ω–∏–∫': '–≤—Ç–æ—Ä–Ω–∏–∫',
        '—Å—Ä–µ–¥–∞': '—Å—Ä–µ–¥–∞', 
        '—á–µ—Ç–≤–µ—Ä–≥': '—á–µ—Ç–≤–µ—Ä–≥',
        '–ø—è—Ç–Ω–∏—Ü–∞': '–ø—è—Ç–Ω–∏—Ü–∞',
        '—Å—É–±–±–æ—Ç–∞': '—Å—É–±–±–æ—Ç–∞'
    }
    
    if '—Å–µ–≥–æ–¥–Ω—è' in text:
        await show_today(update, context)
    elif '–∑–∞–≤—Ç—Ä–∞' in text:
        await show_tomorrow(update, context)
    elif any(day in text for day in days_mapping.keys()):
        for day_ru, day_en in days_mapping.items():
            if day_ru in text:
                await show_day_of_week(update, context, day_ru)
                break
    elif '–∑–≤–æ–Ω–∫–∏' in text or 'üîî' in text:
        await show_bells(update, context)
    elif '—Å–∞–π—Ç' in text or 'üåê' in text:
        await website_info(update, context)
    else:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é üëÜ")

def main():
    application = Application.builder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling()

if __name__ == '__main__':
    main()
