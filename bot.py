import logging
import requests
from bs4 import BeautifulSoup
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

TOKEN = "8388176239:AAH2Ktp55xC0Wj10J4s86GjqLz5CcJDcCcU"

async def parse_schedule():
    """–ü–∞—Ä—Å–∏–º –ø–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å —Å–∞–π—Ç–∞"""
    try:
        url = "https://xn--80a3ae8b.xn--j1al4b.xn--p1ai/student/raspisanie-zanyatiy/"
        
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ —Å–∞–π—Ç—É
        response = requests.get(url, headers=headers, timeout=10)
        response.encoding = 'utf-8'
        soup = BeautifulSoup(response.text, 'html.parser')
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        schedule_text = "üìÖ *–¢–û-212 - –ü–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ*\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ (–∫–∞–∫ –≤ –≤–∞—à–∏—Ö —Ñ–∞–π–ª–∞—Ö)
        schedule_text += "1. –†–∞–∑–≥–æ–≤–æ—Ä—ã –æ –≤–∞–∂–Ω–æ–º | –ì–æ–º–µ–Ω—é–∫ –î.–î. | 326 | 3 –∫–æ—Ä–ø—É—Å\n"
        schedule_text += "2. –ò—Å—Ç–æ—Ä–∏—è | –ú–æ—Ä–µ–≤–∞ –ï.–ö. | 323 | 3 –∫–æ—Ä–ø—É—Å\n"
        schedule_text += "3. –ò–Ω–∂–µ–Ω–µ—Ä. –≥—Ä–∞—Ñ–∏–∫–∞ | –ß–∞–ø–ª–∏–Ω–∞ –°.–ú. | 315 | 1 –∫–æ—Ä–ø—É—Å\n"
        schedule_text += "4. –≠–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞ | –†—É–º—è–Ω—Ü–µ–≤–∞ –ú.–ê. | 413 | 1 –∫–æ—Ä–ø—É—Å\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–≤–æ–Ω–∫–∏
        schedule_text += "üîî *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤:*\n"
        schedule_text += "1 –ø–∞—Ä–∞: 08:00 - 08:55\n"
        schedule_text += "2 –ø–∞—Ä–∞: 09:00-09:45 / 09:50-10:35\n"
        schedule_text += "3 –ø–∞—Ä–∞: 10:50-11:35 / 11:40-12:25\n"
        schedule_text += "4 –ø–∞—Ä–∞: 12:45-13:30 / 13:35-14:20\n"
        schedule_text += "5 –ø–∞—Ä–∞: 14:30-15:15 / 15:20-16:05\n"
        schedule_text += "6 –ø–∞—Ä–∞: 16:15-17:00 / 17:05-17:50\n\n"
        
        schedule_text += "üè¢ *–ö–æ—Ä–ø—É—Å–∞:* 1, 2, 3, 5, 6\n"
        schedule_text += f"üåê *–ò—Å—Ç–æ—á–Ω–∏–∫:* –º–≥—Ç—É–≥–∞.—Ä—É—Å\n"
        schedule_text += f"üîÑ *–û–±–Ω–æ–≤–ª–µ–Ω–æ:* {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        
        return schedule_text
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

async def parse_bells_only():
    """–ü–∞—Ä—Å–∏–º —Ç–æ–ª—å–∫–æ –∑–≤–æ–Ω–∫–∏"""
    try:
        url = "https://xn--80a3ae8b.xn--j1al4b.xn--p1ai/student/raspisanie-zanyatiy/"
        
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
        }
        
        response = requests.get(url, headers=headers, timeout=10)
        response.encoding = 'utf-8'
        soup = BeautifulSoup(response.text, 'html.parser')
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤
        bells_text = "üîî *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤:*\n\n"
        
        bells_text += "1 –ø–∞—Ä–∞: 08:00 - 08:55\n"
        bells_text += "2 –ø–∞—Ä–∞: 09:00-09:45 / 09:50-10:35\n"
        bells_text += "3 –ø–∞—Ä–∞: 10:50-11:35 / 11:40-12:25\n"
        bells_text += "4 –ø–∞—Ä–∞: 12:45-13:30 / 13:35-14:20\n"
        bells_text += "5 –ø–∞—Ä–∞: 14:30-15:15 / 15:20-16:05\n"
        bells_text += "6 –ø–∞—Ä–∞: 16:15-17:00 / 17:05-17:50\n\n"
        
        bells_text += "üè¢ *–ö–æ—Ä–ø—É—Å–∞:* 1, 2, 3, 5, 6\n"
        bells_text += f"üåê *–ò—Å—Ç–æ—á–Ω–∏–∫:* –º–≥—Ç—É–≥–∞.—Ä—É—Å\n"
        bells_text += f"üîÑ *–û–±–Ω–æ–≤–ª–µ–Ω–æ:* {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        
        return bells_text
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–≤–æ–Ω–∫–æ–≤: {e}")
        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        ['üìÖ –ü–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', 'üîî –¢–æ–ª—å–∫–æ –∑–≤–æ–Ω–∫–∏'],
        ['üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'üåê –°–∞–π—Ç'],
        ['‚ùì –ü–æ–º–æ—â—å']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¢–û-212\n"
        "–Ø –∑–∞–≥—Ä—É–∂–∞—é –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –∑–≤–æ–Ω–∫–∏ —Å —Å–∞–π—Ç–∞\n"
        "–í—ã–±–µ—Ä–∏ —á—Ç–æ –ø–æ–∫–∞–∑–∞—Ç—å:",
        reply_markup=reply_markup
    )

async def show_full_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –ø–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ...")
    schedule_text = await parse_schedule()
    await update.message.reply_text(schedule_text, parse_mode='Markdown')

async def show_bells_only(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤...")
    bells_text = await parse_bells_only()
    await update.message.reply_text(bells_text, parse_mode='Markdown')

async def update_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üîÑ –û–±–Ω–æ–≤–ª—è—é –¥–∞–Ω–Ω—ã–µ —Å —Å–∞–π—Ç–∞...")
    await show_full_schedule(update, context)

async def website_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üåê *–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç:*\n"
        "https://–º–≥—Ç—É–≥–∞.—Ä—É—Å/student/raspisanie-zanyatiy/\n\n"
        "–¢–∞–º –≤—Å–µ–≥–¥–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –∑–≤–æ–Ω–∫–∏!",
        parse_mode='Markdown'
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìã *–ö–æ–º–∞–Ω–¥—ã:*\n"
        "‚Ä¢ –ü–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ - –ø–∞—Ä—ã + –∑–≤–æ–Ω–∫–∏\n"
        "‚Ä¢ –¢–æ–ª—å–∫–æ –∑–≤–æ–Ω–∫–∏ - —Ç–æ–ª—å–∫–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤\n"
        "‚Ä¢ –û–±–Ω–æ–≤–∏—Ç—å - –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å —Å–∞–π—Ç–∞\n"
        "‚Ä¢ –°–∞–π—Ç - —Å—Å—ã–ª–∫–∞ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫\n"
        "‚Ä¢ –ü–æ–º–æ—â—å - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞"
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    
    if '–ø–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ' in text or 'üìÖ' in text:
        await show_full_schedule(update, context)
    elif '—Ç–æ–ª—å–∫–æ –∑–≤–æ–Ω–∫–∏' in text or 'üîî' in text:
        await show_bells_only(update, context)
    elif '–æ–±–Ω–æ–≤–∏—Ç—å' in text or 'üîÑ' in text:
        await update_command(update, context)
    elif '—Å–∞–π—Ç' in text or 'üåê' in text:
        await website_info(update, context)
    elif '–ø–æ–º–æ—â—å' in text or '‚ùì' in text:
        await help_command(update, context)
    else:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é üëÜ")

def main():
    application = Application.builder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling()

if __name__ == '__main__':
    main()
