import logging
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

TOKEN = "8388176239:AAH2Ktp55xC0Wj10J4s86GjqLz5CcJDcCcU"

# –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Ä–∞–∑–Ω—ã–µ –¥–Ω–∏
schedule_data = {
    "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": [
        "1. –†–∞–∑–≥–æ–≤–æ—Ä—ã –æ –≤–∞–∂–Ω–æ–º | 326 | –ì–æ–º–µ–Ω—é–∫ –î.–î. | 3 –∫–æ—Ä–ø—É—Å",
        "2. –ò—Å—Ç–æ—Ä–∏—è | 323 | –ú–æ—Ä–µ–≤–∞ –ï.–ö. | 3 –∫–æ—Ä–ø—É—Å", 
        "3. –ò–Ω–∂–µ–Ω–µ—Ä. –≥—Ä–∞—Ñ–∏–∫–∞ | 315 | –ß–∞–ø–ª–∏–Ω–∞ –°.–ú. | 1 –∫–æ—Ä–ø—É—Å",
        "4. –≠–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞ | 413 | –†—É–º—è–Ω—Ü–µ–≤–∞ –ú.–ê. | 1 –∫–æ—Ä–ø—É—Å"
    ],
    "–≤—Ç–æ—Ä–Ω–∏–∫": [
        "1. –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ | 210 | –ü–µ—Ç—Ä–æ–≤ –ò.–ò. | 1 –∫–æ—Ä–ø—É—Å",
        "2. –§–∏–∑–∏–∫–∞ | 315 | –°–∏–¥–æ—Ä–æ–≤ –ê.–ê. | 1 –∫–æ—Ä–ø—É—Å",
        "3. –§–∏–∑–∫—É–ª—å—Ç—É—Ä–∞ | —Å–ø–æ—Ä—Ç–∑–∞–ª | –ö—É–∑–Ω–µ—Ü–æ–≤ –°.–°. | 2 –∫–æ—Ä–ø—É—Å"
    ],
    "—Å—Ä–µ–¥–∞": [
        "1. –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ | 401 | –ò–≤–∞–Ω–æ–≤–∞ –û.–ü. | 1 –∫–æ—Ä–ø—É—Å",
        "2. –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö | 402 | –°–º–∏—Ä–Ω–æ–≤ –î.–í. | 1 –∫–æ—Ä–ø—É—Å",
        "3. –í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ | 403 | –ö–æ–∑–ª–æ–≤ –ú.–ò. | 1 –∫–æ—Ä–ø—É—Å"
    ],
    "—á–µ—Ç–≤–µ—Ä–≥": [
        "1. –ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ | 205 | Johnson M. | 2 –∫–æ—Ä–ø—É—Å",
        "2. –≠–∫–æ–Ω–æ–º–∏–∫–∞ | 310 | –í–∞—Å–∏–ª—å–µ–≤–∞ –õ.–ö. | 3 –∫–æ—Ä–ø—É—Å",
        "3. –ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç | 312 | –ü–æ–ø–æ–≤ –ù.–ù. | 3 –∫–æ—Ä–ø—É—Å"
    ],
    "–ø—è—Ç–Ω–∏—Ü–∞": [
        "1. –ë–ñ–î | 115 | –û—Ä–ª–æ–≤ –°.–ü. | 1 –∫–æ—Ä–ø—É—Å",
        "2. –≠–∫–æ–ª–æ–≥–∏—è | 116 | –ó–µ–ª–µ–Ω–∞—è –ï.–í. | 1 –∫–æ—Ä–ø—É—Å",
        "3. –ü—Ä–æ–µ–∫—Ç–Ω–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å | 401 | —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å"
    ]
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        ['üìÖ –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', 'üìÖ –í—Ç–æ—Ä–Ω–∏–∫'],
        ['üìÖ –°—Ä–µ–¥–∞', 'üìÖ –ß–µ—Ç–≤–µ—Ä–≥'], 
        ['üìÖ –ü—è—Ç–Ω–∏—Ü–∞', 'üìÖ –°–µ–≥–æ–¥–Ω—è'],
        ['üîÑ –û–±–Ω–æ–≤–∏—Ç—å']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¢–û-212\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏–ª–∏ –Ω–∞–∂–º–∏ '–°–µ–≥–æ–¥–Ω—è'",
        reply_markup=reply_markup
    )

async def show_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE, day: str):
    if day in schedule_data:
        schedule_text = f"üìÖ *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day.capitalize()}*\n\n"
        for lesson in schedule_data[day]:
            schedule_text += f"‚Ä¢ {lesson}\n"
        
        schedule_text += "\nüîî *–ó–í–û–ù–ö–ò*\n"
        schedule_text += "1 –ø–∞—Ä–∞: 08:00 - 08:55\n"
        schedule_text += "2 –ø–∞—Ä–∞: 09:00-09:45 / 09:50-10:35\n\n"
        schedule_text += "üè¢ *–ö–æ—Ä–ø—É—Å–∞:* 1, 2, 3, 5, 6\n\n"
        schedule_text += f"üîÑ *–û–±–Ω–æ–≤–ª–µ–Ω–æ:* {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        
        await update.message.reply_text(schedule_text, parse_mode='Markdown')
    else:
        await update.message.reply_text("‚ùå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    
    days = {
        '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
        '–≤—Ç–æ—Ä–Ω–∏–∫': '–≤—Ç–æ—Ä–Ω–∏–∫', 
        '—Å—Ä–µ–¥–∞': '—Å—Ä–µ–¥–∞',
        '—á–µ—Ç–≤–µ—Ä–≥': '—á–µ—Ç–≤–µ—Ä–≥',
        '–ø—è—Ç–Ω–∏—Ü–∞': '–ø—è—Ç–Ω–∏—Ü–∞',
        '—Å–µ–≥–æ–¥–Ω—è': datetime.now().strftime('%A').lower()
    }
    
    for day_key, day_value in days.items():
        if day_key in text:
            await show_schedule(update, context, day_value)
            return
    
    if '–æ–±–Ω–æ–≤–∏—Ç—å' in text or 'üîÑ' in text:
        await update.message.reply_text("‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
        await start(update, context)
    else:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ üëÜ")

def main():
    application = Application.builder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling()

if __name__ == '__main__':
    main()
