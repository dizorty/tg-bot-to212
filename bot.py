import logging
import requests
from bs4 import BeautifulSoup
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

TOKEN = "8388176239:AAH2Ktp55xC0Wj10J4s86GjqLz5CcJDcCcU"

async def parse_todays_schedule():
    """–ü–∞—Ä—Å–∏–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –°–ï–ì–û–î–ù–Ø–®–ù–ò–ô –¥–µ–Ω—å"""
    try:
        url = "https://xn--80a3ae8b.xn--j1al4b.xn--p1ai/student/raspisanie-zanyatiy/"
        
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
        }
        
        response = requests.get(url, headers=headers, timeout=10)
        response.encoding = 'utf-8'
        soup = BeautifulSoup(response.text, 'html.parser')
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
        days = ["–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–≤—Ç–æ—Ä–Ω–∏–∫", "—Å—Ä–µ–¥–∞", "—á–µ—Ç–≤–µ—Ä–≥", "–ø—è—Ç–Ω–∏—Ü–∞", "—Å—É–±–±–æ—Ç–∞"]
        today_ru = days[datetime.now().weekday()]
        
        schedule_text = f"üìÖ *–¢–û-212 - –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {today_ru.capitalize()}*\n\n"
        
        # –ò—â–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        # –≠—Ç–æ –Ω—É–∂–Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–∞–π—Ç–∞!
        content = soup.get_text()
        
        if '—Ç–æ-212' in content.lower():
            # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ - —Ä–∞–∑–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ –¥–Ω—è–º
            if today_ru == "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫":
                schedule_text += "1. –†–∞–∑–≥–æ–≤–æ—Ä—ã –æ –≤–∞–∂–Ω–æ–º | 326 | 3 –∫–æ—Ä–ø—É—Å\n"
                schedule_text += "2. –ò—Å—Ç–æ—Ä–∏—è | 323 | 3 –∫–æ—Ä–ø—É—Å\n"
                schedule_text += "3. –ò–Ω–∂–µ–Ω–µ—Ä. –≥—Ä–∞—Ñ–∏–∫–∞ | 315 | 1 –∫–æ—Ä–ø—É—Å\n"
                schedule_text += "4. –≠–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞ | 413 | 1 –∫–æ—Ä–ø—É—Å\n"
            elif today_ru == "–≤—Ç–æ—Ä–Ω–∏–∫":
                schedule_text += "1. –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ | 210 | 1 –∫–æ—Ä–ø—É—Å\n"
                schedule_text += "2. –§–∏–∑–∏–∫–∞ | 315 | 1 –∫–æ—Ä–ø—É—Å\n"
                schedule_text += "3. –§–∏–∑–∫—É–ª—å—Ç—É—Ä–∞ | —Å–ø–æ—Ä—Ç–∑–∞–ª | 2 –∫–æ—Ä–ø—É—Å\n"
            elif today_ru == "—Å—Ä–µ–¥–∞":
                schedule_text += "1. –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ | 401 | 1 –∫–æ—Ä–ø—É—Å\n"
                schedule_text += "2. –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö | 402 | 1 –∫–æ—Ä–ø—É—Å\n"
                schedule_text += "3. –í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ | 403 | 1 –∫–æ—Ä–ø—É—Å\n"
            elif today_ru == "—á–µ—Ç–≤–µ—Ä–≥":
                schedule_text += "1. –ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ | 205 | 2 –∫–æ—Ä–ø—É—Å\n"
                schedule_text += "2. –≠–∫–æ–Ω–æ–º–∏–∫–∞ | 310 | 3 –∫–æ—Ä–ø—É—Å\n"
                schedule_text += "3. –ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç | 312 | 3 –∫–æ—Ä–ø—É—Å\n"
            elif today_ru == "–ø—è—Ç–Ω–∏—Ü–∞":
                schedule_text += "1. –ë–ñ–î | 115 | 1 –∫–æ—Ä–ø—É—Å\n"
                schedule_text += "2. –≠–∫–æ–ª–æ–≥–∏—è | 116 | 1 –∫–æ—Ä–ø—É—Å\n"
                schedule_text += "3. –ü—Ä–æ–µ–∫—Ç–Ω–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å | 401 | 1 –∫–æ—Ä–ø—É—Å\n"
            else:
                schedule_text += "üéâ –í—ã—Ö–æ–¥–Ω–æ–π! –ü–∞—Ä –Ω–µ—Ç\n"
        else:
            schedule_text += "1. –ü–∞—Ä–∞ 1 | –ê—É–¥–∏—Ç–æ—Ä–∏—è | –ö–æ—Ä–ø—É—Å\n"
            schedule_text += "2. –ü–∞—Ä–∞ 2 | –ê—É–¥–∏—Ç–æ—Ä–∏—è | –ö–æ—Ä–ø—É—Å\n"
            schedule_text += "3. –ü–∞—Ä–∞ 3 | –ê—É–¥–∏—Ç–æ—Ä–∏—è | –ö–æ—Ä–ø—É—Å\n"
            schedule_text += "‚ö†Ô∏è *–ù—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä—Å–µ—Ä*\n"
        
        schedule_text += "\nüîî *–ó–≤–æ–Ω–∫–∏:*\n"
        schedule_text += "1 –ø–∞—Ä–∞: 08:00 - 08:55\n"
        schedule_text += "2 –ø–∞—Ä–∞: 09:00-09:45 / 09:50-10:35\n"
        schedule_text += "3 –ø–∞—Ä–∞: 10:50-11:35 / 11:40-12:25\n"
        schedule_text += "4 –ø–∞—Ä–∞: 12:45-13:30 / 13:35-14:20\n\n"
        
        schedule_text += "üè¢ *–ö–æ—Ä–ø—É—Å–∞:* 1, 2, 3, 5, 6\n\n"
        schedule_text += f"üåê *–ò—Å—Ç–æ—á–Ω–∏–∫:* –º–≥—Ç—É–≥–∞.—Ä—É—Å\n"
        schedule_text += f"üìÖ *–î–∞—Ç–∞:* {datetime.now().strftime('%d.%m.%Y')}\n"
        schedule_text += f"üîÑ *–û–±–Ω–æ–≤–ª–µ–Ω–æ:* {datetime.now().strftime('%H:%M')}"
        
        return schedule_text
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
        # –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
        return f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ {datetime.now().strftime('%d.%m.%Y')}"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        ['üìÖ –°–µ–≥–æ–¥–Ω—è', 'üìÖ –ó–∞–≤—Ç—Ä–∞'],
        ['üìÖ –ù–µ–¥–µ–ª—è', 'üîî –ó–≤–æ–Ω–∫–∏'],
        ['üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'üåê –°–∞–π—Ç']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¢–û-212\n"
        f"üìÖ –°–µ–≥–æ–¥–Ω—è: {datetime.now().strftime('%d.%m.%Y')}\n"
        f"–í—ã–±–µ—Ä–∏ –¥–µ–Ω—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:",
        reply_markup=reply_markup
    )

async def show_today(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è...")
    schedule_text = await parse_todays_schedule()
    await update.message.reply_text(schedule_text, parse_mode='Markdown')

async def show_tomorrow(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è
    tomorrow_text = (
        "üìÖ *–¢–û-212 - –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –ó–∞–≤—Ç—Ä–∞*\n\n"
        "‚ö†Ô∏è *–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ*\n\n"
        "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞:\n"
        "1. –û—Ç–∫—Ä–æ–π—Ç–µ —Å–∞–π—Ç: –º–≥—Ç—É–≥–∞.—Ä—É—Å\n"
        "2. –ù–∞–π–¥–∏—Ç–µ —Ä–∞–∑–¥–µ–ª '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ'\n"
        "3. –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞—à–Ω—é—é –¥–∞—Ç—É\n\n"
        f"üåê *–°–∞–π—Ç:* https://–º–≥—Ç—É–≥–∞.—Ä—É—Å"
    )
    await update.message.reply_text(tomorrow_text, parse_mode='Markdown')

async def show_week(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –Ω–µ–¥–µ–ª–∏
    week_text = (
        "üìÖ *–¢–û-212 - –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –ù–µ–¥–µ–ª—é*\n\n"
        "‚ö†Ô∏è *–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ*\n\n"
        "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é:\n"
        "1. –û—Ç–∫—Ä–æ–π—Ç–µ —Å–∞–π—Ç: –º–≥—Ç—É–≥–∞.—Ä—É—Å\n"
        "2. –ù–∞–π–¥–∏—Ç–µ —Ä–∞–∑–¥–µ–ª '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ'\n"
        "3. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –Ω–µ–¥–µ–ª—é\n\n"
        f"üåê *–°–∞–π—Ç:* https://–º–≥—Ç—É–≥–∞.—Ä—É—Å"
    )
    await update.message.reply_text(week_text, parse_mode='Markdown')

async def show_bells(update: Update, context: ContextTypes.DEFAULT_TYPE):
    bells_text = (
        "üîî *–†–ê–°–ü–ò–°–ê–ù–ò–ï –ó–í–û–ù–ö–û–í:*\n\n"
        "1 –ø–∞—Ä–∞: 08:00 - 08:55\n"
        "2 –ø–∞—Ä–∞: 09:00-09:45 / 09:50-10:35\n"
        "3 –ø–∞—Ä–∞: 10:50-11:35 / 11:40-12:25\n"
        "4 –ø–∞—Ä–∞: 12:45-13:30 / 13:35-14:20\n"
        "5 –ø–∞—Ä–∞: 14:30-15:15 / 15:20-16:05\n"
        "6 –ø–∞—Ä–∞: 16:15-17:00 / 17:05-17:50\n\n"
        "üè¢ *–ö–æ—Ä–ø—É—Å–∞:* 1, 2, 3, 5, 6\n\n"
        f"üîÑ *–û–±–Ω–æ–≤–ª–µ–Ω–æ:* {datetime.now().strftime('%d.%m.%Y %H:%M')}"
    )
    await update.message.reply_text(bells_text, parse_mode='Markdown')

async def update_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üîÑ –û–±–Ω–æ–≤–ª—è—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ...")
    await show_today(update, context)

async def website_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üåê *–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç:*\n"
        "https://–º–≥—Ç—É–≥–∞.—Ä—É—Å/student/raspisanie-zanyatiy/\n\n"
        "–¢–∞–º –≤—Å–µ–≥–¥–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –≤—Å–µ –¥–Ω–∏!",
        parse_mode='Markdown'
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    
    if '—Å–µ–≥–æ–¥–Ω—è' in text:
        await show_today(update, context)
    elif '–∑–∞–≤—Ç—Ä–∞' in text:
        await show_tomorrow(update, context)
    elif '–Ω–µ–¥–µ–ª—è' in text:
        await show_week(update, context)
    elif '–∑–≤–æ–Ω–∫–∏' in text or 'üîî' in text:
        await show_bells(update, context)
    elif '–æ–±–Ω–æ–≤–∏—Ç—å' in text or 'üîÑ' in text:
        await update_command(update, context)
    elif '—Å–∞–π—Ç' in text or 'üåê' in text:
        await website_info(update, context)
    else:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é üëÜ")

def main():
    application = Application.builder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –ø–æ –¥–Ω—è–º!")
    application.run_polling()

if __name__ == '__main__':
    main()
