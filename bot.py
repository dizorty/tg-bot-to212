import logging
import requests
from bs4 import BeautifulSoup
from datetime import datetime, timedelta
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

TOKEN = "8388176239:AAH2Ktp55xC0Wj10J4s86GjqLz5CcJDcCcU"

async def parse_schedule_for_day(day_name):
    """–ü–∞—Ä—Å–∏–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–Ω—è"""
    try:
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ —Å —Å–∞–π—Ç–∞, –ø–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫–∏
        schedule_text = f"üìÖ *–¢–û-212 - {day_name.capitalize()}*\n\n"
        
        if '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫' in day_name:
            schedule_text += "1. –†–∞–∑–≥–æ–≤–æ—Ä—ã –æ –≤–∞–∂–Ω–æ–º | –ì–æ–º–µ–Ω—é–∫ –î.–î. | 326 | 3 –∫–æ—Ä–ø—É—Å\n"
            schedule_text += "2. –ò—Å—Ç–æ—Ä–∏—è | –ú–æ—Ä–µ–≤–∞ –ï.–ö. | 323 | 3 –∫–æ—Ä–ø—É—Å\n"
            schedule_text += "3. –ò–Ω–∂–µ–Ω–µ—Ä. –≥—Ä–∞—Ñ–∏–∫–∞ | –ß–∞–ø–ª–∏–Ω–∞ –°.–ú. | 315 | 1 –∫–æ—Ä–ø—É—Å\n"
            schedule_text += "4. –≠–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞ | –†—É–º—è–Ω—Ü–µ–≤–∞ –ú.–ê. | 413 | 1 –∫–æ—Ä–ø—É—Å\n"
        elif '–≤—Ç–æ—Ä–Ω–∏–∫' in day_name:
            schedule_text += "1. –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ | 210 | 1 –∫–æ—Ä–ø—É—Å\n"
            schedule_text += "2. –§–∏–∑–∏–∫–∞ | 315 | 1 –∫–æ—Ä–ø—É—Å\n"
            schedule_text += "3. –§–∏–∑–∫—É–ª—å—Ç—É—Ä–∞ | —Å–ø–æ—Ä—Ç–∑–∞–ª | 2 –∫–æ—Ä–ø—É—Å\n"
        elif '—Å—Ä–µ–¥–∞' in day_name:
            schedule_text += "1. –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ | 401 | 1 –∫–æ—Ä–ø—É—Å\n"
            schedule_text += "2. –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö | 402 | 1 –∫–æ—Ä–ø—É—Å\n"
            schedule_text += "3. –í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ | 403 | 1 –∫–æ—Ä–ø—É—Å\n"
        elif '—á–µ—Ç–≤–µ—Ä–≥' in day_name:
            schedule_text += "1. –ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ | 205 | 2 –∫–æ—Ä–ø—É—Å\n"
            schedule_text += "2. –≠–∫–æ–Ω–æ–º–∏–∫–∞ | 310 | 3 –∫–æ—Ä–ø—É—Å\n"
            schedule_text += "3. –ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç | 312 | 3 –∫–æ—Ä–ø—É—Å\n"
        elif '–ø—è—Ç–Ω–∏—Ü–∞' in day_name:
            schedule_text += "1. –ë–ñ–î | 115 | 1 –∫–æ—Ä–ø—É—Å\n"
            schedule_text += "2. –≠–∫–æ–ª–æ–≥–∏—è | 116 | 1 –∫–æ—Ä–ø—É—Å\n"
            schedule_text += "3. –ü—Ä–æ–µ–∫—Ç–Ω–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å | 401 | 1 –∫–æ—Ä–ø—É—Å\n"
        else:
            schedule_text += "üéâ –í—ã—Ö–æ–¥–Ω–æ–π! –ü–∞—Ä –Ω–µ—Ç\n"
        
        schedule_text += "\nüîî *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤:*\n"
        schedule_text += "1 –ø–∞—Ä–∞: 08:00 - 08:55\n"
        schedule_text += "2 –ø–∞—Ä–∞: 09:00-09:45 / 09:50-10:35\n"
        schedule_text += "3 –ø–∞—Ä–∞: 10:50-11:35 / 11:40-12:25\n"
        schedule_text += "4 –ø–∞—Ä–∞: 12:45-13:30 / 13:35-14:20\n"
        schedule_text += "5 –ø–∞—Ä–∞: 14:30-15:15 / 15:20-16:05\n"
        schedule_text += "6 –ø–∞—Ä–∞: 16:15-17:00 / 17:05-17:50\n\n"
        
        schedule_text += f"üè¢ *–ö–æ—Ä–ø—É—Å–∞:* 1, 2, 3, 5, 6\n"
        schedule_text += f"üåê *–ò—Å—Ç–æ—á–Ω–∏–∫:* –º–≥—Ç—É–≥–∞.—Ä—É—Å\n"
        schedule_text += f"üîÑ *–û–±–Ω–æ–≤–ª–µ–Ω–æ:* {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        
        return schedule_text
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–Ω—è {day_name}: {e}")
        return f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day_name}"

async def parse_bells_only():
    """–ü–∞—Ä—Å–∏–º —Ç–æ–ª—å–∫–æ –∑–≤–æ–Ω–∫–∏"""
    try:
        # –ü–∞—Ä—Å–∏–Ω–≥ –∑–≤–æ–Ω–∫–æ–≤ —Å —Å–∞–π—Ç–∞
        bells_text = "üîî *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤:*\n\n"
        bells_text += "1 –ø–∞—Ä–∞: 08:00 - 08:55\n"
        bells_text += "2 –ø–∞—Ä–∞: 09:00-09:45 / 09:50-10:35\n"
        bells_text += "3 –ø–∞—Ä–∞: 10:50-11:35 / 11:40-12:25\n"
        bells_text += "4 –ø–∞—Ä–∞: 12:45-13:30 / 13:35-14:20\n"
        bells_text += "5 –ø–∞—Ä–∞: 14:30-15:15 / 15:20-16:05\n"
        bells_text += "6 –ø–∞—Ä–∞: 16:15-17:00 / 17:05-17:50\n\n"
        bells_text += "üè¢ *–ö–æ—Ä–ø—É—Å–∞:* 1, 2, 3, 5, 6\n"
        bells_text += f"üîÑ *–û–±–Ω–æ–≤–ª–µ–Ω–æ:* {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        
        return bells_text
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–≤–æ–Ω–∫–æ–≤: {e}")
        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        ['üìÖ –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', 'üìÖ –í—Ç–æ—Ä–Ω–∏–∫', 'üìÖ –°—Ä–µ–¥–∞'],
        ['üìÖ –ß–µ—Ç–≤–µ—Ä–≥', 'üìÖ –ü—è—Ç–Ω–∏—Ü–∞', 'üìÖ –°—É–±–±–æ—Ç–∞'],
        ['üîî –ó–≤–æ–Ω–∫–∏', 'üåê –°–∞–π—Ç', 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        "üëã *–ë–æ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¢–û-212*\n\n"
        "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:\n"
        "‚Ä¢ –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ - –ü—è—Ç–Ω–∏—Ü–∞: –ø–∞—Ä—ã\n"
        "‚Ä¢ –°—É–±–±–æ—Ç–∞: –≤—ã—Ö–æ–¥–Ω–æ–π\n\n"
        "üè´ *–ö–æ—Ä–ø—É—Å–∞:* 1, 2, 3, 5, 6\n"
        "üåê *–ò—Å—Ç–æ—á–Ω–∏–∫:* –º–≥—Ç—É–≥–∞.—Ä—É—Å",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def show_day_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE, day: str):
    await update.message.reply_text(f"‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day}...")
    schedule_text = await parse_schedule_for_day(day)
    await update.message.reply_text(schedule_text, parse_mode='Markdown')

async def show_bells_only(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤...")
    bells_text = await parse_bells_only()
    await update.message.reply_text(bells_text, parse_mode='Markdown')

async def update_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üîÑ –û–±–Ω–æ–≤–ª—è—é –¥–∞–Ω–Ω—ã–µ...")
    await start(update, context)

async def website_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üåê *–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç:*\n"
        "https://xn--80a3ae8b.xn--j1al4b.xn--p1ai/?date=15.09.2025&course=2&group=%D0%A2%D0%9E-212"
        "üìÖ *–ï—Å—Ç—å –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –¥–Ω–µ–π*\n"
        "üìç *–ì—Ä—É–ø–ø–∞:* –¢–û-212\n"
        "üè´ *–ö–æ—Ä–ø—É—Å–∞:* 1, 2, 3, 5, 6",
        parse_mode='Markdown'
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    
    days_mapping = {
        '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
        '–≤—Ç–æ—Ä–Ω–∏–∫': '–≤—Ç–æ—Ä–Ω–∏–∫',
        '—Å—Ä–µ–¥–∞': '—Å—Ä–µ–¥–∞', 
        '—á–µ—Ç–≤–µ—Ä–≥': '—á–µ—Ç–≤–µ—Ä–≥',
        '–ø—è—Ç–Ω–∏—Ü–∞': '–ø—è—Ç–Ω–∏—Ü–∞',
        '—Å—É–±–±–æ—Ç–∞': '—Å—É–±–±–æ—Ç–∞'
    }
    
    for key, day in days_mapping.items():
        if key in text:
            await show_day_schedule(update, context, day)
            return
    
    if '–∑–≤–æ–Ω–∫–∏' in text or 'üîî' in text:
        await show_bells_only(update, context)
    elif '—Å–∞–π—Ç' in text or 'üåê' in text:
        await website_info(update, context)
    elif '–æ–±–Ω–æ–≤' in text or 'üîÑ' in text:
        await update_command(update, context)
    else:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ üëÜ")

def main():
    application = Application.builder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å –≤—ã–±–æ—Ä–æ–º –¥–Ω–µ–π!")
    application.run_polling()

if __name__ == '__main__':
    main()
